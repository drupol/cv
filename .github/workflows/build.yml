name: Build

on: [push]

jobs:
  dependencies:
    name: Build dependencies
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Check out source files
        uses: actions/checkout@v2

      - name: Create global variables
        id: version
        run: echo "::set-output name=version::$(git rev-parse --short HEAD)"

  build:
    name: Build PDF files
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    runs-on: ubuntu-latest
    needs: dependencies
    strategy:
      matrix:
        sources:
          - input: src/cv/index
            output: cv
    steps:
      - name: Set git to use LF
        run: |
            git config --global core.autocrlf false
            git config --global core.eol lf

      - name: Check out source files
        uses: actions/checkout@v2
        with:
            fetch-depth: 1

      - name: Create global variables
        id: version
        run: echo "::set-output name=version::$(git rev-parse --short HEAD)"

      - name: Install Nix
        uses: cachix/install-nix-action@v11
        with:
          install_url: https://github.com/numtide/nix-unstable-installer/releases/download/nix-2.5pre20211026_5667822/install
          # Configure Nix to enable flakes
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Build document
        run: nix develop --command make

      - name: Upload build assets (${{ matrix.sources.input }})
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.sources.output }}
          path: build/${{ matrix.sources.output }}.pdf

  release:
    name: "Create tag/pre-release"
    runs-on: ubuntu-latest
    needs: [dependencies,build]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create pre-release (${{ needs.dependencies.outputs.version }})
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}-${{ needs.dependencies.outputs.version }}
          release_name: Version ${{ github.run_number }} (${{ needs.dependencies.outputs.version }})
          draft: true
          prerelease: true

  assets:
    name: Upload release assets
    runs-on: ubuntu-latest
    needs: [dependencies,release]
    strategy:
      matrix:
        assets:
          - input: cv

    steps:
      - name: Download build assets (${{ matrix.assets.input }})
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.assets.input }}
          path: ${{ matrix.assets.input }}

      - name: List PDF files
        continue-on-error: true
        run: find . -name \*.pdf -print

      - name: Upload release assets (${{ matrix.assets.input }}, ${{ needs.dependencies.outputs.version }})
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ matrix.assets.input }}/${{ matrix.assets.input }}.pdf
          asset_name: ${{ matrix.assets.input }}.pdf
          asset_content_type: application/pdf
