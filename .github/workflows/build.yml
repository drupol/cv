name: Build

on: [push]

jobs:
  dependencies:
    name: Build dependencies
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Check out source files
        uses: actions/checkout@v4

      - name: Create global variables
        id: version
        run: echo "::set-output name=version::$(git rev-parse --short HEAD)"

  build:
    name: Build PDF files
    runs-on: ubuntu-latest
    needs: dependencies

    steps:
      - name: Set git to use LF
        run: |
            git config --global core.autocrlf false
            git config --global core.eol lf

      - name: Check out source files
        uses: actions/checkout@v4
        with:
            fetch-depth: 1

      - name: Create global variables
        id: version
        run: echo "::set-output name=version::$(git rev-parse --short HEAD)"

      - name: Install Nix
        uses: cachix/install-nix-action@v29

      - name: Build document
        run: |
          mkdir -p output
          nix build . --out-link result-cv --quiet
          cp -vr --dereference $(readlink -f result-cv) cv
          cp -ar cv/* output/

      - name: Upload build assets
        uses: actions/upload-artifact@v4
        with:
          name: assets
          path: output

  release:
    name: "Create tag/pre-release"
    runs-on: ubuntu-latest
    needs: [dependencies,build]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Download build assets (${{ matrix.assets.input }})
        uses: actions/download-artifact@v4

      - name: Rename files
        working-directory: assets
        run: |
            for f in *.pdf; do cp ${f} ../$(printf '%s\n' "cv.pdf"); done

      - name: Create pre-release (${{ needs.dependencies.outputs.version }})
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}-${{ needs.dependencies.outputs.version }}
          name: Version ${{ github.run_number }} (${{ needs.dependencies.outputs.version }})
          draft: false
          prerelease: true
          files: |
            *.pdf
